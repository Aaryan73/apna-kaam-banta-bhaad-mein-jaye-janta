import json
import pdfplumber

import fitz
import mimetypes
import random
import cv2

import numpy as np

from fastapi import APIRouter, HTTPException, status, File, UploadFile, Request, Body
from fastapi.encoders import jsonable_encoder
from fastapi.responses import JSONResponse

from typing import Annotated, Dict

from GeminiAPI.api_request import prepare_prompt, get_questions, prepare_prompt_for_answercheck, get_evaluation


router = APIRouter(
    tags=["Gemini Requests"]
)


@router.post("/questions", response_description= \
             "Questions generated by Gemini")
async def gemini_questions(
    file: Annotated[UploadFile, File(description="A file read as UploadFile")], 
    data: str = None):
    content_type = file.content_type
    if content_type not in ["application/pdf", "application/x-pdf"]:
        raise HTTPException(status_code=415, detail="File is not a valid PDF")
    
    pdf_data = await file.read()
    json_data = json.loads(data) if data else None
    processed_data = {"file_size": len(pdf_data), "file_name": file.filename,  "json_data": json_data}


    # Convert PDF to text using pdfplumber
    pdf_doc = fitz.open(stream=pdf_data, filetype="pdf")
    resume_text = ""
    for page in pdf_doc:
        resume_text += page.get_text()

    prompt = prepare_prompt(resume=resume_text,
                            tech_stack=json_data['techStack'],
                            difficulty=json_data['difficultyLevel'],
                            question_count=json_data['questionCount'])
    
    print(prompt)

    questions = get_questions(prompt)

    return {
        "metadata": processed_data,
        "questions": questions
    }

@router.post("/check-answers", response_description= \
             "Checking answers using llm")
async def check_answers(json_data: dict = Body(...)):
    
    if not isinstance(json_data, dict):
        return {"error": "Data must be a dictionary"}

    prompt = prepare_prompt_for_answercheck(json_data)
    score = get_evaluation(prompt)
    return {
        "score": score
    }

    